// Code generated by ogen, DO NOT EDIT.

package filmlibAPI

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/Actor
type Actor struct {
	ActorID  OptUUID     `json:"actor_id"`
	Name     string      `json:"name"`
	Gender   ActorGender `json:"gender"`
	Birthday time.Time   `json:"birthday"`
	Movies   []Movie     `json:"movies"`
}

// GetActorID returns the value of ActorID.
func (s *Actor) GetActorID() OptUUID {
	return s.ActorID
}

// GetName returns the value of Name.
func (s *Actor) GetName() string {
	return s.Name
}

// GetGender returns the value of Gender.
func (s *Actor) GetGender() ActorGender {
	return s.Gender
}

// GetBirthday returns the value of Birthday.
func (s *Actor) GetBirthday() time.Time {
	return s.Birthday
}

// GetMovies returns the value of Movies.
func (s *Actor) GetMovies() []Movie {
	return s.Movies
}

// SetActorID sets the value of ActorID.
func (s *Actor) SetActorID(val OptUUID) {
	s.ActorID = val
}

// SetName sets the value of Name.
func (s *Actor) SetName(val string) {
	s.Name = val
}

// SetGender sets the value of Gender.
func (s *Actor) SetGender(val ActorGender) {
	s.Gender = val
}

// SetBirthday sets the value of Birthday.
func (s *Actor) SetBirthday(val time.Time) {
	s.Birthday = val
}

// SetMovies sets the value of Movies.
func (s *Actor) SetMovies(val []Movie) {
	s.Movies = val
}

type ActorGender string

const (
	ActorGenderMale   ActorGender = "male"
	ActorGenderFemale ActorGender = "female"
)

// AllValues returns all ActorGender values.
func (ActorGender) AllValues() []ActorGender {
	return []ActorGender{
		ActorGenderMale,
		ActorGenderFemale,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ActorGender) MarshalText() ([]byte, error) {
	switch s {
	case ActorGenderMale:
		return []byte(s), nil
	case ActorGenderFemale:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActorGender) UnmarshalText(data []byte) error {
	switch ActorGender(data) {
	case ActorGenderMale:
		*s = ActorGenderMale
		return nil
	case ActorGenderFemale:
		*s = ActorGenderFemale
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Actors []Actor

// AddActorOK is response for AddActor operation.
type AddActorOK struct{}

// AddMovieOK is response for AddMovie operation.
type AddMovieOK struct{}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// DeleteActorByIDOK is response for DeleteActorByID operation.
type DeleteActorByIDOK struct{}

// Error.
// Ref: #/components/schemas/Error
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

type GetMoviesOrder string

const (
	GetMoviesOrderAsc  GetMoviesOrder = "asc"
	GetMoviesOrderDesc GetMoviesOrder = "desc"
)

// AllValues returns all GetMoviesOrder values.
func (GetMoviesOrder) AllValues() []GetMoviesOrder {
	return []GetMoviesOrder{
		GetMoviesOrderAsc,
		GetMoviesOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetMoviesOrder) MarshalText() ([]byte, error) {
	switch s {
	case GetMoviesOrderAsc:
		return []byte(s), nil
	case GetMoviesOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetMoviesOrder) UnmarshalText(data []byte) error {
	switch GetMoviesOrder(data) {
	case GetMoviesOrderAsc:
		*s = GetMoviesOrderAsc
		return nil
	case GetMoviesOrderDesc:
		*s = GetMoviesOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetMoviesSortBy string

const (
	GetMoviesSortByName GetMoviesSortBy = "name"
	GetMoviesSortByRate GetMoviesSortBy = "rate"
	GetMoviesSortByDate GetMoviesSortBy = "date"
)

// AllValues returns all GetMoviesSortBy values.
func (GetMoviesSortBy) AllValues() []GetMoviesSortBy {
	return []GetMoviesSortBy{
		GetMoviesSortByName,
		GetMoviesSortByRate,
		GetMoviesSortByDate,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetMoviesSortBy) MarshalText() ([]byte, error) {
	switch s {
	case GetMoviesSortByName:
		return []byte(s), nil
	case GetMoviesSortByRate:
		return []byte(s), nil
	case GetMoviesSortByDate:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetMoviesSortBy) UnmarshalText(data []byte) error {
	switch GetMoviesSortBy(data) {
	case GetMoviesSortByName:
		*s = GetMoviesSortByName
		return nil
	case GetMoviesSortByRate:
		*s = GetMoviesSortByRate
		return nil
	case GetMoviesSortByDate:
		*s = GetMoviesSortByDate
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Movie
type Movie struct {
	MovieID     OptUUID     `json:"movie_id"`
	Name        string      `json:"name"`
	Description string      `json:"description"`
	Date        time.Time   `json:"date"`
	Rate        int         `json:"rate"`
	ActorsIDS   []uuid.UUID `json:"actorsIDS"`
}

// GetMovieID returns the value of MovieID.
func (s *Movie) GetMovieID() OptUUID {
	return s.MovieID
}

// GetName returns the value of Name.
func (s *Movie) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Movie) GetDescription() string {
	return s.Description
}

// GetDate returns the value of Date.
func (s *Movie) GetDate() time.Time {
	return s.Date
}

// GetRate returns the value of Rate.
func (s *Movie) GetRate() int {
	return s.Rate
}

// GetActorsIDS returns the value of ActorsIDS.
func (s *Movie) GetActorsIDS() []uuid.UUID {
	return s.ActorsIDS
}

// SetMovieID sets the value of MovieID.
func (s *Movie) SetMovieID(val OptUUID) {
	s.MovieID = val
}

// SetName sets the value of Name.
func (s *Movie) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Movie) SetDescription(val string) {
	s.Description = val
}

// SetDate sets the value of Date.
func (s *Movie) SetDate(val time.Time) {
	s.Date = val
}

// SetRate sets the value of Rate.
func (s *Movie) SetRate(val int) {
	s.Rate = val
}

// SetActorsIDS sets the value of ActorsIDS.
func (s *Movie) SetActorsIDS(val []uuid.UUID) {
	s.ActorsIDS = val
}

type Movies []Movie

// MoviesMovieIDDeleteOK is response for MoviesMovieIDDelete operation.
type MoviesMovieIDDeleteOK struct{}

// MoviesMovieIDPatchOK is response for MoviesMovieIDPatch operation.
type MoviesMovieIDPatchOK struct{}

// NewOptGetMoviesOrder returns new OptGetMoviesOrder with value set to v.
func NewOptGetMoviesOrder(v GetMoviesOrder) OptGetMoviesOrder {
	return OptGetMoviesOrder{
		Value: v,
		Set:   true,
	}
}

// OptGetMoviesOrder is optional GetMoviesOrder.
type OptGetMoviesOrder struct {
	Value GetMoviesOrder
	Set   bool
}

// IsSet returns true if OptGetMoviesOrder was set.
func (o OptGetMoviesOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetMoviesOrder) Reset() {
	var v GetMoviesOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetMoviesOrder) SetTo(v GetMoviesOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetMoviesOrder) Get() (v GetMoviesOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetMoviesOrder) Or(d GetMoviesOrder) GetMoviesOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetMoviesSortBy returns new OptGetMoviesSortBy with value set to v.
func NewOptGetMoviesSortBy(v GetMoviesSortBy) OptGetMoviesSortBy {
	return OptGetMoviesSortBy{
		Value: v,
		Set:   true,
	}
}

// OptGetMoviesSortBy is optional GetMoviesSortBy.
type OptGetMoviesSortBy struct {
	Value GetMoviesSortBy
	Set   bool
}

// IsSet returns true if OptGetMoviesSortBy was set.
func (o OptGetMoviesSortBy) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetMoviesSortBy) Reset() {
	var v GetMoviesSortBy
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetMoviesSortBy) SetTo(v GetMoviesSortBy) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetMoviesSortBy) Get() (v GetMoviesSortBy, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetMoviesSortBy) Or(d GetMoviesSortBy) GetMoviesSortBy {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// PatchActorByIdOK is response for PatchActorById operation.
type PatchActorByIdOK struct{}
